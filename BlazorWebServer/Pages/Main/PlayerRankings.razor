@using Application.DTOs.Ranking;
@using Application.Interfaces;
@inject ITennisPlayerService TennisPlayerService
@inject NavigationManager NavigationManager

<div class="m-4">
    <table class="table ranking-table">
        <thead>
            <tr>
                <th>Position</th>
                <th>Inititials</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var player in PlayerList)
            {
                <tr>
                    <td>@player.Position</td>
                    <td>@player.Initials</td>
                    <td>
                        <button onclick="@(() => NavigationManager.NavigateTo($"/players/{player.PlayerId}",true))" class="btn btn-info"><i class="bi bi-person"></i></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button onclick="@(() => NavigationManager.NavigateTo("/create-player",true))" class="btn btn-primary">
        <i class="bi bi-person-add"></i> Add New
    </button>
</div>




@code {
    [Parameter]
    public List<RankingRecord> PlayerList { get; set; }

    [Parameter]
    public EventCallback<List<RankingRecord>> PlayerListChanged { get; set; }

    private async Task OnMyPropertyChanged()
    {
        await PlayerListChanged.InvokeAsync(PlayerList);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await PlayerListChanged.InvokeAsync(PlayerList);
    }
}