@using Communication.DTOs.Ranking;
@using Application.Interfaces;
@inject ITennisPlayerHttpRepository TennisPlayerService
@inject NavigationManager NavigationManager

<div class="m-4">
    <table class="table ranking-table">
        <thead>
            <tr>
                <th class="position-col">Position</th>
                <th class="initials-col">Initials</th>
                <th class="actions-col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var player in PlayerList)
            {
                <tr>
                    <td>@player.Position</td>
                    <td>@player.Initials</td>
                    <td>
                        <button onclick="@(() => NavigationManager.NavigateTo($"/players/{player.PlayerId}", true))" class="btn btn-action"><i class="bi bi-info-circle icon-action"></i></button>
                        @*<button onclick="@(() => RemovePlayer(player.PlayerId))" class="btn btn-action btn-remove"><i class="bi bi-trash icon-action"></i></button>*@
                        @if (IsChellengable(player.Position))
                        {
                            <button disabled onclick="@(() => ChallengePlayer(player.PlayerId))" class="btn btn-action btn-challenge"><i class="bi bi-award icon-action"></i></button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button onclick="@(() => NavigationManager.NavigateTo("/create-player", true))" class="btn btn-primary">
        <i class="bi bi-person-plus"></i> Add New
    </button>
</div>





@code {
    [Parameter]
    public List<RankingRecord> PlayerList { get; set; }

    [Parameter]
    public EventCallback<List<RankingRecord>> PlayerListChanged { get; set; }

    private void RemovePlayer(Guid id) { }
    private void ChallengePlayer(Guid id) { }

    private bool IsChellengable(int position)
    {
        //That is temporrary
        Random random = new Random();
        return random.Next(2) == 0;
    }

    private async Task OnMyPropertyChanged()
    {
        await PlayerListChanged.InvokeAsync(PlayerList);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await PlayerListChanged.InvokeAsync(PlayerList);
    }
}