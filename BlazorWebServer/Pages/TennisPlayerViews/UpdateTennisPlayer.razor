@inject ITennisPlayerHttpRepository TennisPlayerService
@inject NavigationManager NavigationManager

@page "/players/{PlayerId}/update"
@using Communication.DTOs.TennisPlayer;
@using Application.Interfaces;

<div class="page-content mt-5">
    @if (errorMessage != null)
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    <EditForm Model="@TennisPlayer" OnValidSubmit="@UpdatePlayer">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="initials">Initials:</label>
            <InputText id="initials" class="form-control" @bind-Value="TennisPlayer.Initials" />
            <ValidationMessage For="@(() => TennisPlayer.Initials)" />
        </div>
        <button type="submit" class="btn btn-primary">Update</button>
    </EditForm>
</div>
@code {

    [Parameter]
    public string PlayerId { get; set; }

    private string errorMessage;

    public TennisPlayerDto TennisPlayer { get; set; } = new TennisPlayerDto();

    protected override async Task OnInitializedAsync() => TennisPlayer = await TennisPlayerService.GetByIdAsync(PlayerId);

    private async Task UpdatePlayer()
    {
        try
        {
            await TennisPlayerService.UpdateAsync(Guid.Parse(PlayerId), TennisPlayer);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

}
       
