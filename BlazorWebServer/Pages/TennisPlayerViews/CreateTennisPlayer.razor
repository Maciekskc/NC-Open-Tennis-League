@page "/create-player"
@using Communication.DTOs.TennisPlayer;
@using Application.Repositories.Interfaces
@inject ITennisPlayerHttpRepository TennisPlayerService
@inject NavigationManager NavigationManager

<div class="page-content mt-5">
    <h1>Create Player</h1>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    <EditForm Model="@playerDto" OnValidSubmit="@CreatePlayer">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="initials">Initials:</label>
            <InputText id="initials" class="form-control" @bind-Value="playerDto.Initials" />
            <ValidationMessage For="@(() => playerDto.Initials)" />
        </div>
        <button type="submit" class="btn btn-primary">Create</button>
    </EditForm>
</div>
@code {
    private CreateTennisPlayerRequest playerDto = new CreateTennisPlayerRequest();
    private string? errorMessage;

    private async Task CreatePlayer()
    {
        try
        {
            var createdPlayer = await TennisPlayerService.CreateAsync(playerDto);
            errorMessage = null;
            playerDto = new CreateTennisPlayerRequest();
            NavigationManager.NavigateTo("/ranking", true);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}